[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = ">=3.10,<4.0"

[tool.poetry.dependencies]
fastapi = { version = ">=0.114.2,<1.0.0", extras = ["standard"] }
python-multipart = ">=0.0.7,<1.0.0"
email-validator = ">=2.1.0.post1,<3.0.0.0"
tenacity = ">=8.2.3,<9.0.0"
pydantic = ">2.0"
emails = ">=0.6,<1.0"
jinja2 = ">=3.1.4,<4.0.0"
alembic = ">=1.12.1,<2.0.0"
httpx = ">=0.25.1,<1.0.0"
psycopg = { version = ">=3.1.13,<4.0.0", extras = ["binary"] }
pydantic-settings = ">=2.2.1,<3.0.0"
sentry-sdk = { version = ">=1.40.6,<2.0.0", extras = ["fastapi"] }
pyjwt = ">=2.8.0,<3.0.0"
sqlalchemy = ">=2.0.43,<3.0.0"
psycopg2-binary = ">=2.9.10,<3.0.0"
itsdangerous = ">=2.2.0,<3.0.0"
python-jose = { version = ">=3.5.0,<4.0.0", extras = ["cryptography"] }
passlib = {version = "^1.7.4", extras = ["bcrypt"]}
psycopg2 = "^2.9.10"
asyncpg = "^0.30.0"
greenlet = "^3.2.4"
gunicorn = "^23.0.0"
boto3 = "^1.40.40"


[tool.poetry.group.dev.dependencies]
black = "^25.9.0"

[tool.uv]
dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",
    "mypy<2.0.0,>=1.8.0",
    "ruff<1.0.0,>=0.2.2",
    "pre-commit<4.0.0,>=3.6.2",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
    "coverage<8.0.0,>=7.4.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "T201",   # print statements are not allowed
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.coverage.run]
source = ["app"]
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
sort = "-Cover"

[tool.coverage.html]
show_contexts = true
